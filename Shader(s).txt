// -*- c -*-

/*
Copyright [2017] [Sid Mahapatra]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

precision highp float;

varying vec2 vtex_coord;

uniform sampler2D tex;
uniform highp float num_micro_images_x, num_micro_images_y;
uniform highp float pitch;
uniform highp float view_x, view_y;
uniform highp float aperture;

/*
   4D lightfield lookup
 */
vec4 micro_image_sample(vec2 micro_image, vec2 offset) {
    vec2 num_micro_images = vec2(num_micro_images_x, num_micro_images_y);

    // nearest interpolation
    return texture2D(tex, (micro_image + offset) / num_micro_images);
}

void main() {
    //const float view_x = 0.5, view_y = 0.6, pitch = 0.1094;
    const float radius = 50.0;
    vec2 view_shift = vec2(view_x, view_y);
    vec2 num_micro_images = vec2(num_micro_images_x, num_micro_images_y);
    vec2 micro_image = vtex_coord * num_micro_images;
    vec2 offset = micro_image - floor(micro_image) - view_shift;
    micro_image = floor(micro_image) + view_shift;

    float total_weight = 0.0;

    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);

    for(float i = -radius; i <= radius; i += 1.0) {
        for(float j = -radius; j <= radius; j += 1.0) {
            vec2 shift = vec2(i, j);
            vec2 interp = shift - floor(shift);
            
            vec2 lf_off = - pitch * (offset - shift);
            float weight = exp2(-aperture * dot(shift, shift));

            vec2 mi = micro_image + shift;

            /*
            if(mi.x < 0.0 || mi.y < 0.0 || 
               mi.x > num_micro_images_x || mi.y > num_micro_images_y)
                continue;

            if(lf_off.x < 0.10 || lf_off.y < 0.10 ||
               lf_off.x > 0.90 || lf_off.y > 0.90)
                continue;
            */

            vec4 sample = weight * micro_image_sample(micro_image + shift,
                                                       lf_off);
            
            if(length(sample.rgb) > 0.1) {
                gl_FragColor += sample;
                total_weight += weight;
            }
        }
    }

    gl_FragColor /= total_weight;
}
